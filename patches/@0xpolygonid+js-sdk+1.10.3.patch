diff --git a/node_modules/@0xpolygonid/js-sdk/dist/node/cjs/circuits/atomic-query-sig-v2-on-chain.js b/node_modules/@0xpolygonid/js-sdk/dist/node/cjs/circuits/atomic-query-sig-v2-on-chain.js
index 30fa313..f8e532f 100644
--- a/node_modules/@0xpolygonid/js-sdk/dist/node/cjs/circuits/atomic-query-sig-v2-on-chain.js
+++ b/node_modules/@0xpolygonid/js-sdk/dist/node/cjs/circuits/atomic-query-sig-v2-on-chain.js
@@ -20,7 +20,8 @@ class AtomicQuerySigV2OnChainInputs extends common_1.BaseConfig {
      *
      */
     validate() {
-        if (!this.requestID) {
+        console.log("validate", this.requestID);
+        if (this.requestID === undefined) {
             throw new Error(models_1.CircuitError.EmptyRequestID);
         }
         if (!this.claim.nonRevProof?.proof) {
diff --git a/node_modules/@0xpolygonid/js-sdk/dist/node/cjs/proof/proof-service.js b/node_modules/@0xpolygonid/js-sdk/dist/node/cjs/proof/proof-service.js
index e6fa04c..7079ac6 100644
--- a/node_modules/@0xpolygonid/js-sdk/dist/node/cjs/proof/proof-service.js
+++ b/node_modules/@0xpolygonid/js-sdk/dist/node/cjs/proof/proof-service.js
@@ -62,6 +62,7 @@ class ProofService {
     }
     /** {@inheritdoc IProofService.generateProof} */
     async generateProof(proofReq, identifier, opts) {
+        console.log("proofReq", proofReq)
         if (!opts) {
             opts = {
                 skipRevocation: false,
diff --git a/node_modules/@0xpolygonid/js-sdk/dist/node/cjs/proof/provers/inputs-generator.js b/node_modules/@0xpolygonid/js-sdk/dist/node/cjs/proof/provers/inputs-generator.js
index e6fcca1..4bd29cc 100644
--- a/node_modules/@0xpolygonid/js-sdk/dist/node/cjs/proof/provers/inputs-generator.js
+++ b/node_modules/@0xpolygonid/js-sdk/dist/node/cjs/proof/provers/inputs-generator.js
@@ -163,7 +163,7 @@ class InputGenerator {
             circuitInputs.authClaim = authClaimData.claim;
             circuitInputs.authClaimIncMtp = authClaimData.proof;
             circuitInputs.authClaimNonRevMtp = authInfo.nonRevProof.proof;
-            if (!params.challenge) {
+            if (params.challenge === undefined) {
                 throw new Error('challenge must be provided for onchain circuits');
             }
             const signature = await this._identityWallet.signChallenge(params.challenge, authInfo.credential);
